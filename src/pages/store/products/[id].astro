---
import Layout from "../../../layouts/Layout.astro";
import { products } from "../../../data/store/products";
import { sellers } from "../../../data/store/sellers";
import { categories } from "../../../data/store/categories";

export function getStaticPaths() {
  return products.map(product => ({
    params: { id: product.id },
    props: { product }
  }));
}

const { product } = Astro.props;
const seller = sellers.find(s => s.id === product.sellerId);
const category = categories.find(c => c.id === product.categoryId);

const formatPrice = (price: number) => {
  return new Intl.NumberFormat('en-IN', {
    style: 'currency',
    currency: 'INR'
  }).format(price);
};
---

<Layout title={product.title}>
  <main class="min-h-screen">
    <div class="container mx-auto px-6 py-32">
      <a href="/store" class="text-purple-400 hover:text-purple-300 mb-8 inline-block">‚Üê Back to Store</a>
      
      <div class="grid grid-cols-1 md:grid-cols-2 gap-12">
        <div class="space-y-4">
          {product.images.map((image, index) => (
            <button 
              class="w-full cursor-zoom-in" 
              onclick={`openModal(${index})`}
              type="button"
            >
              <img 
                src={image} 
                alt={product.title}
                class="w-full rounded-lg hover:opacity-90 transition-opacity"
              />
            </button>
          ))}
        </div>
        
        <div>
          <h1 class="text-4xl font-light mb-4">{product.title}</h1>
          <p class="text-2xl font-medium mb-6">{formatPrice(product.price)}</p>
          
          {!product.inStock && (
            <div class="bg-red-500/10 text-red-400 px-4 py-2 rounded-md inline-block mb-6">
              Out of Stock
            </div>
          )}
          
          <p class="text-gray-300 mb-8">{product.description}</p>

          <div class="border-t border-white/10 pt-6 mb-8">
            <div class="space-y-4">
              {category && (
                <div>
                  <p class="text-sm text-gray-400">Category</p>
                  <p class="text-white">{category.name}</p>
                </div>
              )}
              
              {product.tags && (
                <div>
                  <p class="text-sm text-gray-400">Tags</p>
                  <div class="flex flex-wrap gap-2 mt-1">
                    {product.tags.map(tag => (
                      <span class="bg-white/10 px-2 py-1 rounded text-sm">{tag}</span>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
          
          {seller && (
            <div class="border-t border-white/10 pt-6 mb-8">
              <p class="text-sm text-gray-400 mb-4">Sold by</p>
              <a 
                href={`/store/sellers/${seller.id}`}
                class="flex items-center gap-4 group"
              >
                {seller.image && (
                  <img 
                    src={seller.image} 
                    alt={seller.name}
                    class="w-12 h-12 rounded-full object-cover"
                  />
                )}
                <div>
                  <h3 class="text-lg group-hover:text-purple-400 transition-colors">{seller.name}</h3>
                </div>
              </a>
            </div>
          )}

          <div class="border-t border-white/10 pt-6">
            <h2 class="text-2xl font-light mb-4">Buy Now</h2>
            {seller && (
              <div class="space-y-4">
                <p class="text-gray-300">
                  To purchase this item, please contact the seller at:
                </p>
                <a 
                  href={`mailto:${seller.email}?subject=Order Inquiry: ${product.title}`}
                  class="text-purple-400 hover:text-purple-300 block"
                >
                  {seller.email}
                </a>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  </main>

  <div id="imageModal" class="fixed inset-0 bg-black/95 z-50 hidden items-center justify-center">
    <button 
      onclick="closeModal()"
      class="absolute top-4 right-4 text-white/50 hover:text-white p-2 z-50"
      aria-label="Close modal"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>

    <button 
      onclick="previousImage()"
      class="absolute left-4 top-1/2 -translate-y-1/2 text-white/50 hover:text-white p-2"
      aria-label="Previous image"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
      </svg>
    </button>

    <button 
      onclick="nextImage()"
      class="absolute right-4 top-1/2 -translate-y-1/2 text-white/50 hover:text-white p-2"
      aria-label="Next image"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
      </svg>
    </button>

    <div class="w-full h-full flex items-center justify-center p-4">
      <img 
        id="modalImage" 
        src="" 
        alt={product.title}
        class="max-w-full max-h-full object-contain"
      />
    </div>
  </div>
</Layout>

<script define:vars={{ images: product.images }}>
  let currentImageIndex = 0;
  const modal = document.getElementById('imageModal');
  const modalImage = document.getElementById('modalImage');

  window.openModal = (index) => {
    currentImageIndex = index;
    modalImage.src = images[currentImageIndex];
    modal.style.display = 'flex';
    document.body.style.overflow = 'hidden';
  };

  window.closeModal = () => {
    modal.style.display = 'none';
    document.body.style.overflow = 'auto';
  };

  window.previousImage = () => {
    currentImageIndex = (currentImageIndex - 1 + images.length) % images.length;
    modalImage.src = images[currentImageIndex];
  };

  window.nextImage = () => {
    currentImageIndex = (currentImageIndex + 1) % images.length;
    modalImage.src = images[currentImageIndex];
  };

  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') closeModal();
    if (e.key === 'ArrowLeft') previousImage();
    if (e.key === 'ArrowRight') nextImage();
  });

  modal.addEventListener('click', (e) => {
    if (e.target === modal) closeModal();
  });
</script>